@page "/document"
@using Microsoft.AspNetCore.Authorization
@using System.Text.Json
@using Shared
@attribute [Authorize]

@inject NavigationManager nav
@inject IJSRuntime Js
@inject HttpClient httpClient


<PageTitle>DATA DOKUMEN</PageTitle>

<h1>DATA DOKUMEN</h1>

<p>Seluruh Data File Yang Di Upload.</p>

@if (datas == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Tanggal</th>
                <th>Sumber</th>
                <th>URL</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in datas)
            {
                <tr>
                    <td>@item.Tanggal</td>
                    <td>@item.Source</td>
                    <td>@item.UrlFile</td>
                    <td><a style="cursor:pointer" @onclick="@(async ()=>await download(@item.UrlFile))">Download</a></td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    private DocumentDTO[]? datas;

    protected override async Task OnInitializedAsync()
    {
        var x = await httpClient.GetAsync("api/admin/documents");
        if (x.IsSuccessStatusCode)
        {
            var dataString = await x.Content.ReadAsStringAsync();
            datas = JsonSerializer.Deserialize<DocumentDTO[]>(dataString, Helper.JsonOptions);
        }
    }


    async Task download(string key)
    {
        var response = await httpClient.GetAsync($"/api/files/getbykey?key={key}");
        if (response.IsSuccessStatusCode)
        {
            var stream = await response.Content.ReadAsStreamAsync();
            using var streamRef = new DotNetStreamReference(stream);
            await Js.InvokeVoidAsync("saveFile", key, streamRef);
        }
    }

}