@page "/account/login"
@using Morris.Blazor.FluentValidation;
@using Morris.Blazor.Validation;
@using OcphApiAuth;
@using OcphApiAuth.Client;
@using OcphApiAuth.Client.Validators;
@using Client.OcphAuthClient.Models;

@inject IAccountService accountService
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider authStateProvider
@inject ILocalStorageService localStorageService
<div style="height:90vh;" class="w-100 d-flex justify-content-center flex-column align-items-center">
    <div class="col-md-5">

        @if (showError)
        {
            <div class="alert alert-danger" role="alert">
                @errorMessage
            </div>
        }
        <h1>Login</h1>
        <EditForm Model="loginRequest" OnValidSubmit="OnValidSubmitAction">
            <div class="form-group">
                <label for="exampleInputEmail1">Email address</label>
                <InputText type="email" class="form-control" @bind-Value="loginRequest.UserName" placeholder="Enter email"></InputText>
                <small id="emailHelp" class="form-text text-muted">We'll never share your email with anyone else.</small>
            </div>
            <div class="form-group mt-2">
                <label for="exampleInputPassword1">Password</label>
                <InputText type="password" class="form-control" @bind-Value="loginRequest.Password"></InputText>
            </div>
            <div class="form-group form-check mt-2">
                <input type="checkbox" class="form-check-input" id="exampleCheck1">
                <label class="form-check-label" for="exampleCheck1">Check me out</label>
            </div>
            <button type="submit" class="btn btn-primary mt-2">Submit</button>
        </EditForm>
    </div>

</div>
@code {
    bool showError = false;
    LoginRequest loginRequest = new LoginRequest();
    string? errorMessage;
    async Task OnValidSubmitAction(EditContext context)
    {
        try
        {
            showError = false;
            var result = await accountService.Login(loginRequest);
            if (result != null)
            {

                await localStorageService.SetItemAsync("token", result.Token);
                await localStorageService.SetItemAsync("userName", result.UserName);
                await localStorageService.SetItemAsync("email", result.Email);
                await authStateProvider.GetAuthenticationStateAsync();

                var userProfider = await authStateProvider.GetAuthenticationStateAsync();
                if (userProfider.User.IsInRole("Admin"))
                {
                    navigationManager.NavigateTo("/");
                    return;
                }
                else
                {
                    await accountService.Logout();
                    throw new SystemException("Maaf Anda Bukan Administrator");
                }


            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            showError = true;
        }
    }

}
